name: pc-parse CI and CD

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

jobs:

  pc-parse_XAmple:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_NOLOGO: true

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up MSBuild
      uses: actions/setup-msbuild@v1.1
      if: matrix.os == 'windows-latest'

    - name: Build
      working-directory: pc-parse
      run: msbuild Pcparse.sln /p:Configuration=Release;Platform=x64
      if: matrix.os == 'windows-latest'

    - name: Publish Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dllFiles
        path: |
          pc-parse/ample/x64/Release-xdll/xample64.dll
          pc-parse/ample/x64/Release-xdll/xample64.pdb
          pc-parse/ample/Release-xdll/xample32.dll
          pc-parse/ample/Release-xdll/xample32.pdb
      if: matrix.os == 'windows-latest'
      # if: github.event_name == 'pull_request'

    - name: Configure
      shell: bash
      working-directory: pc-parse
      run: ./configure
      # if: matrix.os == 'ubuntu-latest'

    - name: Make
      shell: bash
      working-directory: pc-parse
      run: make all

    # - name: Package
      # run: dotnet pack --include-symbols --no-restore --no-build -p:SymbolPackageFormat=snupkg

    # - name: Publish to Nuget
      # run: dotnet nuget push artifacts/*.nupkg -s https://api.nuget.org/v3/index.json -k ${{secrets.SILLSDEV_PUBLISH_NUGET_ORG}} --skip-duplicate
      # if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'

    - name: Publish Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: soFiles
        path: pc-parse/lib/*.so
      # if: github.event_name == 'pull_request'
